{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport { Chart, BarController, DoughnutController, LineController, PieController, PolarAreaController, RadarController, BubbleController, ScatterController } from 'chart.js';\nvar ChartEmits;\n\n(function (ChartEmits) {\n  ChartEmits[\"ChartRendered\"] = \"chart:rendered\";\n  ChartEmits[\"ChartUpdated\"] = \"chart:updated\";\n  ChartEmits[\"ChartDestroyed\"] = \"chart:destroyed\";\n  ChartEmits[\"LabelsUpdated\"] = \"labels:updated\";\n})(ChartEmits || (ChartEmits = {}));\n\nfunction chartCreate(createChartFunction, chartData, chartOptions, context) {\n  createChartFunction(chartData, chartOptions);\n\n  if (context !== undefined) {\n    context.emit(ChartEmits.ChartRendered);\n  }\n}\n\nfunction chartUpdate(chart, context) {\n  chart.update();\n\n  if (context !== undefined) {\n    context.emit(ChartEmits.ChartUpdated);\n  }\n}\n\nfunction chartDestroy(chart, context) {\n  chart.destroy();\n\n  if (context !== undefined) {\n    context.emit(ChartEmits.ChartDestroyed);\n  }\n}\n\nfunction getChartData(data, datasetIdKey) {\n  const nextData = {\n    labels: typeof data.labels === \"undefined\" ? [] : [...data.labels],\n    datasets: []\n  };\n  setChartDatasets(nextData, { ...data\n  }, datasetIdKey);\n  return nextData;\n}\n\nfunction setChartDatasets(oldData, newData, datasetIdKey) {\n  const addedDatasets = [];\n  oldData.datasets = newData.datasets.map(nextDataset => {\n    // given the new set, find it's current match\n    const currentDataset = oldData.datasets.find(dataset => dataset[datasetIdKey] === nextDataset[datasetIdKey]); // There is no original to update, so simply add new one\n\n    if (!currentDataset || !nextDataset.data || addedDatasets.includes(currentDataset)) {\n      return { ...nextDataset\n      };\n    }\n\n    addedDatasets.push(currentDataset);\n    Object.assign(currentDataset, nextDataset);\n    return currentDataset;\n  });\n}\n\nfunction setChartLabels(chart, labels, context) {\n  chart.data.labels = labels;\n\n  if (context !== undefined) {\n    context.emit(ChartEmits.LabelsUpdated);\n  }\n}\n\nfunction setChartOptions(chart, options) {\n  chart.options = { ...options\n  };\n}\n\nfunction compareData(newData, oldData) {\n  // Get new and old DataSet Labels\n  const newDatasetLabels = newData.datasets.map(dataset => {\n    return dataset.label;\n  });\n  const oldDatasetLabels = oldData.datasets.map(dataset => {\n    return dataset.label;\n  }); // Check if Labels are equal and if dataset length is equal\n\n  return oldData.datasets.length === newData.datasets.length && newDatasetLabels.every((value, index) => value === oldDatasetLabels[index]);\n}\n\nconst templateError = \"Please remove the <template></template> tags from your chart component. See https://vue-chartjs.org/guide/#vue-single-file-components\";\nconst ANNOTATION_PLUGIN_KEY = \"annotation\";\n\nfunction generateChart(chartId, chartType, chartController) {\n  let _chartRef = null;\n  return {\n    props: {\n      chartData: {\n        type: Object,\n        required: true\n      },\n      chartOptions: {\n        type: Object,\n        default: () => {}\n      },\n      datasetIdKey: {\n        type: String,\n        default: \"label\"\n      },\n      chartId: {\n        type: String,\n        default: chartId\n      },\n      width: {\n        type: Number,\n        default: 400\n      },\n      height: {\n        type: Number,\n        default: 400\n      },\n      cssClasses: {\n        type: String,\n        default: \"\"\n      },\n      styles: {\n        type: Object,\n        default: () => {}\n      },\n      plugins: {\n        type: Array,\n        default: () => []\n      }\n    },\n\n    data() {\n      return {\n        _chart: null\n      };\n    },\n\n    computed: {\n      hasAnnotationPlugin() {\n        var ref, ref1;\n        const pluginSettings = (ref = this.chartOptions) === null || ref === void 0 ? void 0 : (ref1 = ref.plugins) === null || ref1 === void 0 ? void 0 : ref1[ANNOTATION_PLUGIN_KEY];\n        return typeof pluginSettings !== \"undefined\";\n      }\n\n    },\n\n    created() {\n      Chart.register(chartController);\n    },\n\n    mounted() {\n      _chartRef = {\n        current: null\n      };\n\n      if (\"datasets\" in this.chartData && this.chartData.datasets.length > 0) {\n        chartCreate(this.renderChart, this.chartData, this.chartOptions);\n        this.$emit(ChartEmits.ChartRendered);\n      }\n    },\n\n    watch: {\n      chartData: {\n        handler: function (newValue, oldValue) {\n          this.chartDataHandler(newValue, oldValue);\n        },\n        deep: true\n      },\n      chartOptions: {\n        handler: function (newValue) {\n          this.chartOptionsHandler(newValue);\n        },\n        deep: true\n      }\n    },\n    methods: {\n      renderChart(data, options) {\n        const currentChart = this.getCurrentChart();\n\n        if (currentChart !== null) {\n          chartDestroy(currentChart);\n          this.$emit(ChartEmits.ChartDestroyed);\n        }\n\n        if (!this.$refs.canvas) {\n          throw new Error(templateError);\n        } else {\n          const chartData = getChartData(data, this.datasetIdKey);\n          const canvasEl2DContext = this.$refs.canvas.getContext(\"2d\");\n\n          if (canvasEl2DContext !== null) {\n            this.setCurrentChart(new Chart(canvasEl2DContext, {\n              type: chartType,\n              data: chartData,\n              options,\n              plugins: this.plugins\n            }));\n          }\n        }\n      },\n\n      chartDataHandler(newValue, oldValue) {\n        const newData = { ...newValue\n        };\n        const oldData = { ...oldValue\n        };\n        const currentChart = this.getCurrentChart();\n\n        if (Object.keys(oldData).length > 0) {\n          const isEqualLabelsAndDatasetsLength = compareData(newData, oldData);\n\n          if (isEqualLabelsAndDatasetsLength && currentChart !== null) {\n            setChartDatasets(currentChart.data, newData, this.datasetIdKey);\n\n            if (newData.labels !== undefined) {\n              setChartLabels(currentChart, newData.labels);\n              this.$emit(ChartEmits.LabelsUpdated);\n            }\n\n            this.updateChart();\n            this.$emit(ChartEmits.ChartUpdated);\n          } else {\n            if (currentChart !== null) {\n              chartDestroy(currentChart);\n              this.$emit(ChartEmits.ChartDestroyed);\n            }\n\n            chartCreate(this.renderChart, this.chartData, this.chartOptions);\n            this.$emit(ChartEmits.ChartRendered);\n          }\n        } else {\n          if (currentChart !== null) {\n            chartDestroy(currentChart);\n            this.$emit(ChartEmits.ChartDestroyed);\n          }\n\n          chartCreate(this.renderChart, this.chartData, this.chartOptions);\n          this.$emit(ChartEmits.ChartRendered);\n        }\n      },\n\n      chartOptionsHandler(options) {\n        const currentChart = this.getCurrentChart();\n\n        if (currentChart !== null) {\n          setChartOptions(currentChart, options);\n          this.updateChart();\n        } else {\n          chartCreate(this.renderChart, this.chartData, this.chartOptions);\n        }\n      },\n\n      updateChart() {\n        const currentChart = this.getCurrentChart();\n        chartUpdate(currentChart);\n      },\n\n      getCurrentChart() {\n        return this.hasAnnotationPlugin ? _chartRef.current : this.$data._chart;\n      },\n\n      setCurrentChart(chart) {\n        this.hasAnnotationPlugin ? _chartRef.current = chart : this.$data._chart = chart;\n      }\n\n    },\n\n    beforeDestroy() {\n      const currentChart = this.getCurrentChart();\n\n      if (currentChart !== null) {\n        chartDestroy(currentChart);\n        this.$emit(ChartEmits.ChartDestroyed);\n      }\n    },\n\n    render: function (createElement) {\n      return createElement(\"div\", {\n        style: this.styles,\n        class: this.cssClasses\n      }, [createElement(\"canvas\", {\n        attrs: {\n          id: this.chartId,\n          width: this.width,\n          height: this.height\n        },\n        ref: \"canvas\"\n      })]);\n    }\n  };\n}\n/** @type Object */\n\n\nconst Bar = /* #__PURE__ */generateChart(\"bar-chart\", \"bar\", BarController);\n/** @type Object */\n\nconst Doughnut = /* #__PURE__ */generateChart(\"doughnut-chart\", \"doughnut\", DoughnutController);\n/** @type Object */\n\nconst Line = /* #__PURE__ */generateChart(\"line-chart\", \"line\", LineController);\n/** @type Object */\n\nconst Pie = /* #__PURE__ */generateChart(\"pie-chart\", \"pie\", PieController);\n/** @type Object */\n\nconst PolarArea = /* #__PURE__ */generateChart(\"polar-chart\", \"polarArea\", PolarAreaController);\n/** @type Object */\n\nconst Radar = /* #__PURE__ */generateChart(\"radar-chart\", \"radar\", RadarController);\n/** @type Object */\n\nconst Bubble = /* #__PURE__ */generateChart(\"bubble-chart\", \"bubble\", BubbleController);\n/** @type Object */\n\nconst Scatter = /* #__PURE__ */generateChart(\"scatter-chart\", \"scatter\", ScatterController);\nexport { Bar, Bubble, Doughnut, Line, Pie, PolarArea, Radar, Scatter, generateChart };","map":{"version":3,"mappings":"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","names":["ChartEmits","ChartRendered","ChartUpdated","ChartDestroyed","LabelsUpdated","chartCreate","createChartFunction","chartData","chartOptions","context","undefined","emit","chartUpdate","chart","update","chartDestroy","destroy","getChartData","data","datasetIdKey","nextData","labels","datasets","setChartDatasets","oldData","newData","addedDatasets","map","nextDataset","currentDataset","find","dataset","includes","push","Object","assign","setChartLabels","setChartOptions","options","compareData","newDatasetLabels","label","oldDatasetLabels","length","every","value","index","templateError","ANNOTATION_PLUGIN_KEY","generateChart","chartId","chartType","chartController","_chartRef","props","type","required","default","String","width","Number","height","cssClasses","styles","plugins","Array","_chart","computed","hasAnnotationPlugin","ref","ref1","pluginSettings","created","ChartJS","register","mounted","current","renderChart","$emit","watch","handler","newValue","oldValue","chartDataHandler","deep","chartOptionsHandler","methods","currentChart","getCurrentChart","$refs","canvas","Error","canvasEl2DContext","getContext","setCurrentChart","keys","isEqualLabelsAndDatasetsLength","updateChart","$data","beforeDestroy","render","createElement","style","class","attrs","id","Bar","BarController","Doughnut","DoughnutController","Line","LineController","Pie","PieController","PolarArea","PolarAreaController","Radar","RadarController","Bubble","BubbleController","Scatter","ScatterController"],"sources":["../src/utils.ts","src/Charts.js"],"sourcesContent":["import type { ChartType, ChartDataset, DefaultDataPoint } from 'chart.js'\n\nimport type { TChartData, TChartOptions, TypedChartJS } from './types'\n\nimport { SetupContext } from 'vue'\n\nexport enum ChartEmits {\n  ChartRendered = 'chart:rendered',\n  ChartUpdated = 'chart:updated',\n  ChartDestroyed = 'chart:destroyed',\n  LabelsUpdated = 'labels:updated'\n}\n\nexport function chartCreate<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  createChartFunction: (\n    data: TChartData<TType, TData, TLabel>,\n    options: TChartOptions<TType>\n  ) => void,\n  chartData: TChartData<TType, TData, TLabel>,\n  chartOptions: TChartOptions<TType>,\n  context?: SetupContext\n): void {\n  createChartFunction(chartData, chartOptions)\n\n  if (context !== undefined) {\n    context.emit(ChartEmits.ChartRendered)\n  }\n}\n\nexport function chartUpdate<\n  TType extends ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(chart: TypedChartJS<TType, TData, TLabel>, context?: SetupContext): void {\n  chart.update()\n\n  if (context !== undefined) {\n    context.emit(ChartEmits.ChartUpdated)\n  }\n}\n\nexport function chartDestroy<\n  TType extends ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(chart: TypedChartJS<TType, TData, TLabel>, context?: SetupContext): void {\n  chart.destroy()\n\n  if (context !== undefined) {\n    context.emit(ChartEmits.ChartDestroyed)\n  }\n}\n\nexport function getChartData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  data: TChartData<TType, TData, TLabel>,\n  datasetIdKey: string\n): TChartData<TType, TData, TLabel> {\n  const nextData = {\n    labels: typeof data.labels === 'undefined' ? [] : [...data.labels],\n    datasets: []\n  }\n\n  setChartDatasets(nextData, { ...data }, datasetIdKey)\n  return nextData\n}\n\nexport function setChartDatasets<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  oldData: TChartData<TType, TData, TLabel>,\n  newData: TChartData<TType, TData, TLabel>,\n  datasetIdKey: string\n): void {\n  const addedDatasets: ChartDataset<TType, TData>[] = []\n\n  oldData.datasets = newData.datasets.map(\n    (nextDataset: Record<string, unknown>) => {\n      // given the new set, find it's current match\n      const currentDataset = oldData.datasets.find(\n        (dataset: Record<string, unknown>) =>\n          dataset[datasetIdKey] === nextDataset[datasetIdKey]\n      )\n\n      // There is no original to update, so simply add new one\n      if (\n        !currentDataset ||\n        !nextDataset.data ||\n        addedDatasets.includes(currentDataset)\n      ) {\n        return { ...nextDataset }\n      }\n\n      addedDatasets.push(currentDataset)\n\n      Object.assign(currentDataset, nextDataset)\n\n      return currentDataset\n    }\n  ) as ChartDataset<TType, TData>[]\n}\n\nexport function setChartLabels<\n  TType extends ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  chart: TypedChartJS<TType, TData, TLabel>,\n  labels: TLabel[] | undefined,\n  context?: SetupContext\n): void {\n  chart.data.labels = labels\n\n  if (context !== undefined) {\n    context.emit(ChartEmits.LabelsUpdated)\n  }\n}\n\nexport function setChartOptions<\n  TType extends ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  chart: TypedChartJS<TType, TData, TLabel>,\n  options: TChartOptions<TType>\n): void {\n  chart.options = { ...options }\n}\n\nexport function compareData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  newData: TChartData<TType, TData, TLabel>,\n  oldData: TChartData<TType, TData, TLabel>\n): boolean {\n  // Get new and old DataSet Labels\n  const newDatasetLabels = newData.datasets.map(dataset => {\n    return dataset.label\n  })\n\n  const oldDatasetLabels = oldData.datasets.map(dataset => {\n    return dataset.label\n  })\n\n  // Check if Labels are equal and if dataset length is equal\n  return (\n    oldData.datasets.length === newData.datasets.length &&\n    newDatasetLabels.every((value, index) => value === oldDatasetLabels[index])\n  )\n}\n\nexport const templateError =\n  'Please remove the <template></template> tags from your chart component. See https://vue-chartjs.org/guide/#vue-single-file-components'\n\nexport const chartUpdateError = 'Update ERROR: chart instance not found'\n","import {\n  Chart as ChartJS,\n  BarController,\n  BubbleController,\n  DoughnutController,\n  LineController,\n  PieController,\n  PolarAreaController,\n  RadarController,\n  ScatterController\n} from 'chart.js'\n\nimport {\n  chartCreate,\n  chartDestroy,\n  chartUpdate,\n  getChartData,\n  setChartLabels,\n  setChartDatasets,\n  compareData,\n  templateError,\n  ChartEmits,\n  setChartOptions\n} from '../../src/utils'\n\nconst ANNOTATION_PLUGIN_KEY = 'annotation'\n\nexport function generateChart(chartId, chartType, chartController) {\n  let _chartRef = null\n\n  return {\n    props: {\n      chartData: {\n        type: Object,\n        required: true\n      },\n      chartOptions: {\n        type: Object,\n        default: () => {}\n      },\n      datasetIdKey: {\n        type: String,\n        default: 'label'\n      },\n      chartId: {\n        type: String,\n        default: chartId\n      },\n      width: {\n        type: Number,\n        default: 400\n      },\n      height: {\n        type: Number,\n        default: 400\n      },\n      cssClasses: {\n        type: String,\n        default: ''\n      },\n      styles: {\n        type: Object,\n        default: () => {}\n      },\n      plugins: {\n        type: Array,\n        default: () => []\n      }\n    },\n    data() {\n      return {\n        _chart: null\n      }\n    },\n    computed: {\n      hasAnnotationPlugin() {\n        const pluginSettings =\n          this.chartOptions?.plugins?.[ANNOTATION_PLUGIN_KEY]\n\n        return typeof pluginSettings !== 'undefined'\n      }\n    },\n    created() {\n      ChartJS.register(chartController)\n    },\n    mounted() {\n      _chartRef = { current: null }\n\n      if ('datasets' in this.chartData && this.chartData.datasets.length > 0) {\n        chartCreate(this.renderChart, this.chartData, this.chartOptions)\n        this.$emit(ChartEmits.ChartRendered)\n      }\n    },\n    watch: {\n      chartData: {\n        handler: function (newValue, oldValue) {\n          this.chartDataHandler(newValue, oldValue)\n        },\n        deep: true\n      },\n      chartOptions: {\n        handler: function (newValue) {\n          this.chartOptionsHandler(newValue)\n        },\n        deep: true\n      }\n    },\n    methods: {\n      renderChart(data, options) {\n        const currentChart = this.getCurrentChart()\n\n        if (currentChart !== null) {\n          chartDestroy(currentChart)\n          this.$emit(ChartEmits.ChartDestroyed)\n        }\n\n        if (!this.$refs.canvas) {\n          throw new Error(templateError)\n        } else {\n          const chartData = getChartData(data, this.datasetIdKey)\n\n          const canvasEl2DContext = this.$refs.canvas.getContext('2d')\n\n          if (canvasEl2DContext !== null) {\n            this.setCurrentChart(\n              new ChartJS(canvasEl2DContext, {\n                type: chartType,\n                data: chartData,\n                options,\n                plugins: this.plugins\n              })\n            )\n          }\n        }\n      },\n      chartDataHandler(newValue, oldValue) {\n        const newData = { ...newValue }\n        const oldData = { ...oldValue }\n        const currentChart = this.getCurrentChart()\n\n        if (Object.keys(oldData).length > 0) {\n          const isEqualLabelsAndDatasetsLength = compareData(newData, oldData)\n\n          if (isEqualLabelsAndDatasetsLength && currentChart !== null) {\n            setChartDatasets(currentChart.data, newData, this.datasetIdKey)\n\n            if (newData.labels !== undefined) {\n              setChartLabels(currentChart, newData.labels)\n              this.$emit(ChartEmits.LabelsUpdated)\n            }\n\n            this.updateChart()\n            this.$emit(ChartEmits.ChartUpdated)\n          } else {\n            if (currentChart !== null) {\n              chartDestroy(currentChart)\n              this.$emit(ChartEmits.ChartDestroyed)\n            }\n\n            chartCreate(this.renderChart, this.chartData, this.chartOptions)\n            this.$emit(ChartEmits.ChartRendered)\n          }\n        } else {\n          if (currentChart !== null) {\n            chartDestroy(currentChart)\n            this.$emit(ChartEmits.ChartDestroyed)\n          }\n\n          chartCreate(this.renderChart, this.chartData, this.chartOptions)\n          this.$emit(ChartEmits.ChartRendered)\n        }\n      },\n      chartOptionsHandler(options) {\n        const currentChart = this.getCurrentChart()\n\n        if (currentChart !== null) {\n          setChartOptions(currentChart, options)\n          this.updateChart()\n        } else {\n          chartCreate(this.renderChart, this.chartData, this.chartOptions)\n        }\n      },\n      updateChart() {\n        const currentChart = this.getCurrentChart()\n        chartUpdate(currentChart)\n      },\n      getCurrentChart() {\n        return this.hasAnnotationPlugin ? _chartRef.current : this.$data._chart\n      },\n      setCurrentChart(chart) {\n        this.hasAnnotationPlugin\n          ? (_chartRef.current = chart)\n          : (this.$data._chart = chart)\n      }\n    },\n    beforeDestroy() {\n      const currentChart = this.getCurrentChart()\n\n      if (currentChart !== null) {\n        chartDestroy(currentChart)\n        this.$emit(ChartEmits.ChartDestroyed)\n      }\n    },\n    render: function (createElement) {\n      return createElement(\n        'div',\n        {\n          style: this.styles,\n          class: this.cssClasses\n        },\n        [\n          createElement('canvas', {\n            attrs: {\n              id: this.chartId,\n              width: this.width,\n              height: this.height\n            },\n            ref: 'canvas'\n          })\n        ]\n      )\n    }\n  }\n}\n\n/** @type Object */\nexport const Bar = /* #__PURE__ */ generateChart(\n  'bar-chart',\n  'bar',\n  BarController\n)\n\n/** @type Object */\nexport const Doughnut = /* #__PURE__ */ generateChart(\n  'doughnut-chart',\n  'doughnut',\n  DoughnutController\n)\n\n/** @type Object */\nexport const Line = /* #__PURE__ */ generateChart(\n  'line-chart',\n  'line',\n  LineController\n)\n\n/** @type Object */\nexport const Pie = /* #__PURE__ */ generateChart(\n  'pie-chart',\n  'pie',\n  PieController\n)\n\n/** @type Object */\nexport const PolarArea = /* #__PURE__ */ generateChart(\n  'polar-chart',\n  'polarArea',\n  PolarAreaController\n)\n\n/** @type Object */\nexport const Radar = /* #__PURE__ */ generateChart(\n  'radar-chart',\n  'radar',\n  RadarController\n)\n\n/** @type Object */\nexport const Bubble = /* #__PURE__ */ generateChart(\n  'bubble-chart',\n  'bubble',\n  BubbleController\n)\n\n/** @type Object */\nexport const Scatter = /* #__PURE__ */ generateChart(\n  'scatter-chart',\n  'scatter',\n  ScatterController\n)\n\nexport default {\n  Bar,\n  Bubble,\n  Doughnut,\n  Line,\n  Pie,\n  PolarArea,\n  Radar,\n  Scatter,\n  generateChart\n}\n"]},"metadata":{},"sourceType":"module"}