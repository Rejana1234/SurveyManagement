{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport DataTable from \"../../../components/datatable/Datatable\";\nimport Pagination from \"../../../components/datatable/Pagination.vue\";\nimport { mapActions, mapState } from \"vuex\";\nimport { http } from \"../../../service/http_service\";\nexport default {\n  name: \"InterportSurvey\",\n  components: {\n    datatable: DataTable,\n    pagination: Pagination\n  },\n\n  data() {\n    let sortOrders = {};\n    let columns = [{\n      label: \"Survey ID\",\n      name: \"reference_no\"\n    }, {\n      label: \"Project Name \",\n      name: \"project_name\"\n    }, {\n      label: \"Start Date\",\n      name: \"start_date\"\n    }, {\n      label: \"End Date\",\n      name: \"end_date\"\n    }, {\n      label: \"Surveyor Name\",\n      name: \"surveyor_name\"\n    }, {\n      label: \"Status\",\n      name: \"status\"\n    }, {\n      label: \"Action\",\n      name: \"action\"\n    }];\n    columns.forEach(column => {\n      sortOrders[column.name] = -1;\n    });\n    return {\n      surveys: [],\n      columns: columns,\n      sortKey: \"id\",\n      sortOrders: sortOrders,\n      perPage: [\"10\", \"20\", \"30\", \"25\", \"50\", \"100\"],\n      tableData: {\n        draw: 0,\n        length: 10,\n        search: \"\",\n        column: 0,\n        dir: \"desc\"\n      },\n      filterSurveyData: {\n        survey_status: \"\",\n        surveyor_id: \"\",\n        surveyor_name: \"\",\n        // surveyor_name: \"ABDUL HAMID\",\n        // surveyor_name: \"MD BIPLOB MIA\",\n        work_order_id: \"\",\n        survey_id: \"\",\n        start_date: \"\",\n        end_date: \"\"\n      },\n      pagination: {\n        last_page: \"\",\n        current_page: 1,\n        total: \"\",\n        last_page_url: \"\",\n        next_page_url: \"\",\n        prev_page_url: \"\",\n        from: \"\",\n        to: \"\"\n      }\n    };\n  },\n\n  computed: { ...mapState({\n      message: state => state.survey.success_message,\n      surveyors: state => state.survey.surveyors\n    })\n  },\n\n  mounted() {\n    this.getAllSurvey();\n    this.getAllSurveyor();\n  },\n\n  methods: { ...mapActions({\n      getAllSurveyor: \"survey/get_all_surveyor\"\n    }),\n\n    getAllSurvey() {\n      this.tableData.draw++;\n      let params = new URLSearchParams();\n      params.append(\"page\", this.pagination.current_page);\n      params.append(\"draw\", this.tableData.draw);\n      params.append(\"length\", this.tableData.length);\n      params.append(\"search\", this.tableData.search);\n      params.append(\"column\", this.tableData.column);\n      params.append(\"dir\", this.tableData.dir);\n      params.append(\"work_order_id\", this.filterSurveyData.work_order_id);\n      params.append(\"surveyor_id\", this.filterSurveyData.surveyor_id);\n      params.append(\"surveyor_name\", this.filterSurveyData.surveyor_name);\n      params.append(\"survey_status\", this.filterSurveyData.survey_status);\n      params.append(\"start_date\", this.filterSurveyData.start_date);\n      params.append(\"end_date\", this.filterSurveyData.end_date);\n      return http().get(\"v1/surveys/getData?\" + params).then(response => {\n        this.surveys = response.data.data.data;\n        this.pagination = response.data.data;\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n\n    sortBy(key) {\n      this.sortKey = key;\n      this.sortOrders[key] = this.sortOrders[key] * -1;\n      this.tableData.column = this.getIndex(this.columns, \"name\", key);\n      this.tableData.dir = this.sortOrders[key] === 1 ? \"asc\" : \"desc\";\n      this.getAllSurvey();\n    },\n\n    getIndex(array, key, value) {\n      return array.findIndex(i => i[key] == value);\n    },\n\n    confirmDelete(survey_details) {\n      let survey_id = survey_details.id;\n      this.$swal.fire({\n        title: \"Are you sure?\",\n        text: \"You won't be able to revert this!\",\n        icon: \"warning\",\n        showCancelButton: true,\n        confirmButtonColor: \"#3085d6\",\n        cancelButtonColor: \"#d33\",\n        confirmButtonText: \"Yes, delete it!\"\n      }).then(result => {\n        if (result.isConfirmed) {\n          console.log(survey_id);\n          this.deleteW_Orders(survey_id);\n        }\n      });\n    },\n\n    deleteSurvey: async function (id) {\n      try {\n        await this.$store.dispatch(\"survey/delete_survey\", id).then(() => {\n          this.$swal.fire({\n            toast: true,\n            position: \"top-end\",\n            icon: \"success\",\n            title: this.message,\n            showConfirmButton: false,\n            timer: 1500\n          });\n          this.getAllSurvey();\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgJA;AACA;AAEA;AAEA;AAEA;EACAA,uBADA;EAGAC;IACAC,oBADA;IAEAC;EAFA,CAHA;;EAQAC;IACA;IACA,eACA;MAAAC;MAAAL;IAAA,CADA,EAEA;MAAAK;MAAAL;IAAA,CAFA,EAGA;MAAAK;MAAAL;IAAA,CAHA,EAIA;MAAAK;MAAAL;IAAA,CAJA,EAKA;MAAAK;MAAAL;IAAA,CALA,EAMA;MAAAK;MAAAL;IAAA,CANA,EAOA;MAAAK;MAAAL;IAAA,CAPA;IASAM;MACAC;IACA,CAFA;IAIA;MACAC,WADA;MAEAF,gBAFA;MAGAG,aAHA;MAIAF,sBAJA;MAKAG,8CALA;MAMAC;QACAC,OADA;QAEAC,UAFA;QAGAC,UAHA;QAIAC,SAJA;QAKAC;MALA,CANA;MAaAC;QACAC,iBADA;QAEAC,eAFA;QAGAC,iBAHA;QAIA;QACA;QACAC,iBANA;QAOAC,aAPA;QAQAC,cARA;QASAC;MATA,CAbA;MAwBArB;QACAsB,aADA;QAEAC,eAFA;QAGAC,SAHA;QAIAC,iBAJA;QAKAC,iBALA;QAMAC,iBANA;QAOAC,QAPA;QAQAC;MARA;IAxBA;EAmCA,CA1DA;;EA4DAC,YACA;MACAC,8CADA;MAEAC;IAFA;EADA,CA5DA;;EAmEAC;IACA;IACA;EACA,CAtEA;;EAwEAC,WACA;MACAC;IADA,EADA;;IAIAC;MACA;MACA;MACAC;MACAA;MACAA;MACAA;MACAA;MACAA;MAEAA;MACAA;MACAA;MACAA;MACAA;MACAA;MAEA,cACAC,GADA,CACA,8BADA,EAEAC,IAFA,CAEAC;QACA;QACA;MACA,CALA,EAMAC,KANA,CAMAC;QACAC;MACA,CARA;IASA,CA9BA;;IAgCAC;MACA;MACA;MACA;MACA;MACA;IACA,CAtCA;;IAwCAC;MACA;IACA,CA1CA;;IA4CAC;MACA;MACA,WACAC,IADA,CACA;QACAC,sBADA;QAEAC,yCAFA;QAGAC,eAHA;QAIAC,sBAJA;QAKAC,6BALA;QAMAC,yBANA;QAOAC;MAPA,CADA,EAUAf,IAVA,CAUAgB;QACA;UACAZ;UACA;QACA;MACA,CAfA;IAgBA,CA9DA;;IAgEAa;MACA;QACA;UACA;YACAC,WADA;YAEAC,mBAFA;YAGAR,eAHA;YAIAF,mBAJA;YAKAW,wBALA;YAMAC;UANA;UAQA;QACA,CAVA;MAWA,CAZA,CAYA;QACAjB;MACA;IACA;EAhFA;AAxEA","names":["name","components","datatable","pagination","data","label","columns","sortOrders","surveys","sortKey","perPage","tableData","draw","length","search","column","dir","filterSurveyData","survey_status","surveyor_id","surveyor_name","work_order_id","survey_id","start_date","end_date","last_page","current_page","total","last_page_url","next_page_url","prev_page_url","from","to","computed","message","surveyors","mounted","methods","getAllSurveyor","getAllSurvey","params","get","then","response","catch","error","console","sortBy","getIndex","confirmDelete","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","result","deleteSurvey","toast","position","showConfirmButton","timer"],"sourceRoot":"src/views/admin/survey","sources":["SurveyList.vue"],"sourcesContent":["<template>\r\n  <div class=\"card\">\r\n    <h1>Surveys</h1>\r\n    <div class=\"flex-container\" style=\"justify-content: flex-end\"></div>\r\n    <div class=\"flex-container-flex-end\">\r\n      <div class=\"flex-item\">\r\n        <input\r\n          type=\"number\"\r\n          placeholder=\"Work Order ID\"\r\n          name=\"work_order_id\"\r\n          v-model=\"filterSurveyData.work_order_id\"\r\n          value=\"\"\r\n        />\r\n      </div>\r\n      <div class=\"flex-item\">\r\n        <select\r\n          id=\"surveyor_id\"\r\n          name=\"surveyor_id\"\r\n          class=\"box\"\r\n          v-model=\"filterSurveyData.surveyor_id\"\r\n          @change=\"getAllSurvey()\"\r\n        >\r\n          <option value=\"\" selected>Select Surveyor</option>\r\n          <option v-for=\"(surveyor, index) in surveyors\" :key=\"index\" :value=\"surveyor.id\">\r\n            {{ surveyor.name }} - (ID: {{ surveyor.id }})\r\n          </option>\r\n        </select>\r\n      </div>\r\n      <div class=\"flex-item\">\r\n        <select\r\n          name=\"survey_status\"\r\n          id=\"survey_status\"\r\n          v-model=\"filterSurveyData.survey_status\"\r\n          @change=\"getAllSurvey()\"\r\n        >\r\n          <option value=\"\" selected disabled>Select Survey Status</option>\r\n          <option value=\"3\">All Survey</option>\r\n          <option value=\"0\">New Survey</option>\r\n          <option value=\"2\">Ongoing Survey</option>\r\n          <option value=\"1\">Completed Survey</option>\r\n        </select>\r\n      </div>\r\n      <div class=\"flex-item\">\r\n        <input type=\"date\" name=\"start_date\" v-model=\"filterSurveyData.start_date\" value=\"\" />\r\n      </div>\r\n      <div class=\"flex-item\">\r\n        <input type=\"date\" name=\"end_date\" v-model=\"filterSurveyData.end_date\" value=\"\" />\r\n      </div>\r\n      <div class=\"flex-item\">\r\n        <button class=\"btn\" @click=\"getAllSurvey()\">Filter</button>\r\n      </div>\r\n    </div>\r\n    <div class=\"flex-container\">\r\n      <div class=\"flex-item\">\r\n        Show:\r\n        <select\r\n          name=\"cars\"\r\n          class=\"entries_count\"\r\n          id=\"cars\"\r\n          style=\"appearance: auto\"\r\n          v-model=\"tableData.length\"\r\n          @change=\"getAllSurvey()\"\r\n        >\r\n          <option v-for=\"(records, index) in perPage\" :key=\"index\" :value=\"records\">\r\n            {{ records }}\r\n          </option>\r\n        </select>\r\n        records per page.\r\n      </div>\r\n\r\n      <div class=\"flex-item\">\r\n        <input\r\n          type=\"text\"\r\n          v-model=\"tableData.search\"\r\n          @input=\"getAllSurvey()\"\r\n          placeholder=\"Search here\"\r\n          class=\"search\"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <div style=\"padding: 10px 10px; overflow-x: auto\">\r\n      <datatable :columns=\"columns\" :sortKey=\"sortKey\" :sortOrders=\"sortOrders\" @sort=\"sortBy\">\r\n        <tbody>\r\n          <tr v-show=\"surveys.length\" v-for=\"survey in surveys\" :key=\"survey.id\">\r\n            <td data-label=\"#Ref\" style=\"text-align: center\">\r\n              {{ survey.reference_no }}\r\n            </td>\r\n            <td data-label=\"Work Order\" style=\"text-align: center\">\r\n              {{ survey.project_name }}\r\n              <h4>({{ survey.work_order_id }})</h4>\r\n            </td>\r\n            <td data-label=\"Start Date\" style=\"text-align: center\">\r\n              {{ survey.start_date }}\r\n            </td>\r\n            <td data-label=\"End Date\" style=\"text-align: center\">\r\n              {{ survey.end_date }}\r\n            </td>\r\n            <td data-label=\"Surveyor Name\" style=\"text-align: center\" v-if=\"survey.surveyor_name\">\r\n              {{ survey.surveyor_name }}\r\n            </td>\r\n            <td data-label=\"Surveyor Name\" style=\"text-align: center\" v-else>--</td>\r\n            <td data-label=\"Status\" style=\"text-align: center\" class=\"chips2\" v-if=\"survey.status == 0\">Not Assign</td>\r\n            <td data-label=\"Status\" style=\"text-align: center\" class=\"chips1\" v-if=\"survey.status == 2\">In_progress</td>\r\n            <td data-label=\"Status\" style=\"text-align: center\" class=\"chips\" v-if=\"survey.status == 1\">Completed</td>\r\n            <td data-label=\"Action\" style=\"text-align: center\">\r\n              <router-link :to=\"`/dashboard/edit_survey/${survey.id}`\">\r\n                <button type=\"button\" class=\"actio-button-margin edit\" title=\"Edit Survey\">\r\n                  <span class=\"material-icons-sharp add\" style=\"font-size: 11px\">edit</span>\r\n                </button>\r\n              </router-link>\r\n              <button\r\n                title=\"Delete Survey\"\r\n                type=\"button\"\r\n                class=\"actio-button-margin delete\"\r\n                v-on:click=\"confirmDelete(survey)\"\r\n              >\r\n                <span class=\"material-icons-sharp add\" style=\"font-size: 11px\">delete</span>\r\n              </button>\r\n              <router-link :to=\"`/dashboard/survey/add_surveyorappoint/${survey.id}`\">\r\n                <button type=\"button\" class=\"actio-button-margin appoint\" v-if=\"survey.status == 0\">Appoint</button>\r\n              </router-link>\r\n            </td>\r\n          </tr>\r\n          <tr v-show=\"!surveys.length\">\r\n            <td colspan=\"6\">No Data Found</td>\r\n          </tr>\r\n        </tbody>\r\n      </datatable>\r\n    </div>\r\n    <div>\r\n      <div class=\"flex-container-pagination\" style=\"padding-right: 10px\">\r\n        <div class=\"flex-item\">\r\n          Showing {{ pagination.from }} to {{ pagination.to }} of {{ pagination.total }} records\r\n        </div>\r\n        <div style=\"display: flex; justify-content: flex-end\">\r\n          <pagination :pagination.sync=\"pagination\" :offset=\"5\" @paginate=\"getAllSurvey()\"></pagination>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport DataTable from \"../../../components/datatable/Datatable\";\r\nimport Pagination from \"../../../components/datatable/Pagination.vue\";\r\n\r\nimport { mapActions, mapState } from \"vuex\";\r\n\r\nimport { http } from \"../../../service/http_service\";\r\n\r\nexport default {\r\n  name: \"InterportSurvey\",\r\n\r\n  components: {\r\n    datatable: DataTable,\r\n    pagination: Pagination,\r\n  },\r\n\r\n  data() {\r\n    let sortOrders = {};\r\n    let columns = [\r\n      { label: \"Survey ID\", name: \"reference_no\" },\r\n      { label: \"Project Name \", name: \"project_name\" },\r\n      { label: \"Start Date\", name: \"start_date\" },\r\n      { label: \"End Date\", name: \"end_date\" },\r\n      { label: \"Surveyor Name\", name: \"surveyor_name\" },\r\n      { label: \"Status\", name: \"status\" },\r\n      { label: \"Action\", name: \"action\" },\r\n    ];\r\n    columns.forEach((column) => {\r\n      sortOrders[column.name] = -1;\r\n    });\r\n\r\n    return {\r\n      surveys: [],\r\n      columns: columns,\r\n      sortKey: \"id\",\r\n      sortOrders: sortOrders,\r\n      perPage: [\"10\", \"20\", \"30\", \"25\", \"50\", \"100\"],\r\n      tableData: {\r\n        draw: 0,\r\n        length: 10,\r\n        search: \"\",\r\n        column: 0,\r\n        dir: \"desc\",\r\n      },\r\n      filterSurveyData: {\r\n        survey_status: \"\",\r\n        surveyor_id: \"\",\r\n        surveyor_name: \"\",\r\n        // surveyor_name: \"ABDUL HAMID\",\r\n        // surveyor_name: \"MD BIPLOB MIA\",\r\n        work_order_id: \"\",\r\n        survey_id: \"\",\r\n        start_date: \"\",\r\n        end_date: \"\",\r\n      },\r\n      pagination: {\r\n        last_page: \"\",\r\n        current_page: 1,\r\n        total: \"\",\r\n        last_page_url: \"\",\r\n        next_page_url: \"\",\r\n        prev_page_url: \"\",\r\n        from: \"\",\r\n        to: \"\",\r\n      },\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    ...mapState({\r\n      message: (state) => state.survey.success_message,\r\n      surveyors: (state) => state.survey.surveyors,\r\n    }),\r\n  },\r\n\r\n  mounted() {\r\n    this.getAllSurvey();\r\n    this.getAllSurveyor();\r\n  },\r\n\r\n  methods: {\r\n    ...mapActions({\r\n      getAllSurveyor: \"survey/get_all_surveyor\",\r\n    }),\r\n    getAllSurvey() {\r\n      this.tableData.draw++;\r\n      let params = new URLSearchParams();\r\n      params.append(\"page\", this.pagination.current_page);\r\n      params.append(\"draw\", this.tableData.draw);\r\n      params.append(\"length\", this.tableData.length);\r\n      params.append(\"search\", this.tableData.search);\r\n      params.append(\"column\", this.tableData.column);\r\n      params.append(\"dir\", this.tableData.dir);\r\n\r\n      params.append(\"work_order_id\", this.filterSurveyData.work_order_id);\r\n      params.append(\"surveyor_id\", this.filterSurveyData.surveyor_id);\r\n      params.append(\"surveyor_name\", this.filterSurveyData.surveyor_name);\r\n      params.append(\"survey_status\", this.filterSurveyData.survey_status);\r\n      params.append(\"start_date\", this.filterSurveyData.start_date);\r\n      params.append(\"end_date\", this.filterSurveyData.end_date);\r\n\r\n      return http()\r\n        .get(\"v1/surveys/getData?\" + params)\r\n        .then((response) => {\r\n          this.surveys = response.data.data.data;\r\n          this.pagination = response.data.data;\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    },\r\n\r\n    sortBy(key) {\r\n      this.sortKey = key;\r\n      this.sortOrders[key] = this.sortOrders[key] * -1;\r\n      this.tableData.column = this.getIndex(this.columns, \"name\", key);\r\n      this.tableData.dir = this.sortOrders[key] === 1 ? \"asc\" : \"desc\";\r\n      this.getAllSurvey();\r\n    },\r\n\r\n    getIndex(array, key, value) {\r\n      return array.findIndex((i) => i[key] == value);\r\n    },\r\n\r\n    confirmDelete(survey_details) {\r\n      let survey_id = survey_details.id;\r\n      this.$swal\r\n        .fire({\r\n          title: \"Are you sure?\",\r\n          text: \"You won't be able to revert this!\",\r\n          icon: \"warning\",\r\n          showCancelButton: true,\r\n          confirmButtonColor: \"#3085d6\",\r\n          cancelButtonColor: \"#d33\",\r\n          confirmButtonText: \"Yes, delete it!\",\r\n        })\r\n        .then((result) => {\r\n          if (result.isConfirmed) {\r\n            console.log(survey_id);\r\n            this.deleteW_Orders(survey_id);\r\n          }\r\n        });\r\n    },\r\n\r\n    deleteSurvey: async function (id) {\r\n      try {\r\n        await this.$store.dispatch(\"survey/delete_survey\", id).then(() => {\r\n          this.$swal.fire({\r\n            toast: true,\r\n            position: \"top-end\",\r\n            icon: \"success\",\r\n            title: this.message,\r\n            showConfirmButton: false,\r\n            timer: 1500,\r\n          });\r\n          this.getAllSurvey();\r\n        });\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\ninput::-webkit-outer-spin-button,\r\ninput::-webkit-inner-spin-button {\r\n  -webkit-appearance: none;\r\n  margin: 0;\r\n}\r\n\r\ninput[type=\"number\"] {\r\n  -moz-appearance: textfield;\r\n}\r\n\r\n.flex-container-flex-end {\r\n  display: flex;\r\n  text-align: center;\r\n  justify-content: flex-end;\r\n}\r\n#survey_status {\r\n  border: 1px solid #aaa !important;\r\n  border-radius: 3px !important;\r\n  background-color: transparent !important;\r\n  padding: 14px !important;\r\n}\r\n#surveyor_id {\r\n  border: 1px solid #aaa !important;\r\n  border-radius: 3px !important;\r\n  background-color: transparent !important;\r\n  padding: 14px !important;\r\n}\r\n.card {\r\n  background-color: #fff;\r\n  padding: 15px;\r\n  border-radius: 10px;\r\n  box-shadow: #f1f1f1;\r\n  margin-top: 25px;\r\n}\r\n\r\nbutton {\r\n  padding: 5px 5px;\r\n  border-radius: 5px;\r\n  color: #fff;\r\n  outline: none;\r\n  border: none;\r\n  cursor: pointer;\r\n}\r\n.btn {\r\n  height: 45px;\r\n  width: 100px;\r\n  background-color: orange;\r\n  font-size: 16px;\r\n}\r\n.search {\r\n  padding: 10px 20px;\r\n  outline: none;\r\n  border: 1px solid #ddd;\r\n  margin-right: 0;\r\n}\r\n.chips {\r\n  width: 40%;\r\n  margin-left: 55px;\r\n}\r\n\r\n.chips1 {\r\n  width: 40%;\r\n  margin-left: 55px;\r\n}\r\n.chips2 {\r\n  width: 42%;\r\n  margin-left: 55px;\r\n}\r\n.appoint {\r\n  background-color: rgb(31, 182, 20);\r\n  border: 1px solid rgb(31, 182, 20);\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}